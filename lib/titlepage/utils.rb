#
# A set of classes to hold results from the API.
# Based on the classes generated by soap4r, with attributes
# changed to use ruby conventions
#

module TitlePage

  class ProductIdentifier
    attr_accessor :product_id_type
    attr_accessor :id_value

    # convert a nokogiri node to a TitlePage::ProductIdentifier object
    #
    def self.from_xml(node)
      return nil if node.nil?
      #<ProductIdentifiers xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="tns:ProductIdentifier[1]">
      #  <item xsi:type="tns:ProductIdentifier">
      #    <ProductIDType xsi:type="xsd:string">15</ProductIDType>
      #    <IDValue xsi:type="xsd:string">9780091835132</IDValue>
      #  </item>
      #</ProductIdentifiers>
      id = self.new
      id.product_id_type = node.xpath("//item/ProductIDType/text()").to_s
      id.id_value = node.xpath("//item/IDValue/text()").to_s
      id
    end
  end

  class Title
    attr_accessor :title_type
    attr_accessor :title_text
    attr_accessor :title_prefix
    attr_accessor :title_without_prefix
    attr_accessor :subtitle

    # convert a nokogiri node to a TitlePage::Title object
    #
    def self.from_xml(node)
      return nil if node.nil?
      #<Title xsi:type="tns:Title">
      #  <TitleType xsi:type="xsd:string">01</TitleType>
      #  <TitleText xsi:type="xsd:string">Fight Club</TitleText>
      #</Title>
      title = self.new
      title.title_type = node.xpath("//Title/TitleType/text()").to_s
      title.title_text = node.xpath("//Title/TitleText/text()").to_s
      title.title_prefix = node.xpath("//Title/TitlePrefix/text()").to_s
      title.title_without_prefix = node.xpath("//Title/TitleWithoutPrefix/text()").to_s
      title.subtitle = node.xpath("//Title/Subtitle/text()").to_s
      title
    end
  end

  class Contributor
    attr_accessor :sequence_number
    attr_accessor :contributor_role
    attr_accessor :person_name
    attr_accessor :person_name_inverted
    attr_accessor :titles_before_names
    attr_accessor :key_names

    # convert a nokogiri node to a TitlePage::Contributor object
    #
    def self.from_xml(node)
      return nil if node.nil?
      #<Contributors xsi:type="SOAP-ENC:Array" SOAP-ENC:arrayType="tns:Contributor[1]">
      #  <item xsi:type="tns:Contributor">
      #    <SequenceNumber xsi:type="xsd:integer">1</SequenceNumber>
      #    <ContributorRole xsi:type="xsd:string">A01</ContributorRole>
      #    <PersonNameInverted xsi:type="xsd:string">Palahniuk, Chuck</PersonNameInverted>
      #  </item>
      #</Contributors>
      contrib = self.new
      contrib.sequence_number = node.xpath("//item/SequenceNumber/text()").to_s.to_i
      contrib.contributor_role = node.xpath("//item/ContributorRole/text()").to_s
      contrib.person_name = node.xpath("//item/PersonName/text()").to_s
      contrib.person_name_inverted = node.xpath("//item/PersonNameInverted/text()").to_s
      contrib.titles_before_names = node.xpath("//item/TitlesBeforeNames/text()").to_s
      contrib.key_names = node.xpath("//item/KeyNames/text()").to_s
      contrib
    end
  end

  class Stock
    attr_accessor :on_hand
    attr_accessor :on_order

    # convert a nokogiri node to a TitlePage::Stock object
    #
    def self.from_xml(node)
      return nil if node.nil?
      #<Stock xsi:type="tns:Stock">
      #  <OnHand xsi:type="xsd:string">Out Of Stock</OnHand>
      #  <OnOrder xsi:type="xsd:string">Yes</OnOrder>
      #</Stock>
      stock = self.new
      stock.on_hand = node.xpath("//Stock/OnHand/text()").to_s
      stock.on_order = node.xpath("//Stock/OnOrder/text()").to_s
      stock
    end
  end

  class Price
    attr_accessor :price_type_code
    attr_accessor :price_amount

    # convert a nokogiri node to a TitlePage::Price object
    #
    def self.from_xml(node)
      return nil if node.nil?
      #<Price xsi:type="tns:Price">
      #  <PriceAmount xsi:type="xsd:decimal">24.95</PriceAmount>
      #</Price>
      price = self.new
      price.price_type_code = node.xpath("//Price/PriceTypeCode/text()").to_s
      val = node.xpath("//Price/PriceAmount/text()").to_s
      price.price_amount = BigDecimal.new(val) if val.size > 0
      price
    end
  end

  class SupplyDetail
    attr_accessor :supplier_name
    attr_accessor :supplier_role
    attr_accessor :product_availability
    attr_accessor :expected_ship_date
    attr_accessor :stock
    attr_accessor :pack_quantity
    attr_accessor :price

    # convert a nokogiri node to a TitlePage::SupplyDetail object
    #
    def self.from_xml(node)
      return nil if node.nil?
      #<SupplyDetail xsi:type="tns:SupplyDetail">
      #  <SupplierName xsi:type="xsd:string">Random House Australia</SupplierName>
      #  <ProductAvailability xsi:type="xsd:string">20</ProductAvailability>
      #  <Stock xsi:type="tns:Stock">
      #    <OnHand xsi:type="xsd:string">Out Of Stock</OnHand>
      #    <OnOrder xsi:type="xsd:string">Yes</OnOrder>
      #  </Stock>
      #  <PackQuantity xsi:type="xsd:integer">28</PackQuantity>
      #  <Price xsi:type="tns:Price">
      #    <PriceAmount xsi:type="xsd:decimal">24.95</PriceAmount>
      #  </Price>
      #</SupplyDetail>

      sd = self.new
      sd.supplier_name = node.xpath("//SupplyDetail/SupplierName/text()").to_s
      sd.supplier_role = node.xpath("//SupplyDetail/SupplierRole/text()").to_s
      sd.product_availability = node.xpath("//SupplyDetail/ProductAvailability/text()").to_s
      sd.expected_ship_date = node.xpath("//SupplyDetail/ExpectedShipDate/text()").to_s
      sd.stock = TitlePage::Stock.from_xml(node.xpath("//SupplyDetail/Stock"))
      sd.price = TitlePage::Price.from_xml(node.xpath("//SupplyDetail/Price"))
      sd
    end
  end

  class Product
    attr_accessor :product_identifiers
    attr_accessor :title
    attr_accessor :contributors
    attr_accessor :supply_detail

    def self.from_xml(node)
      return nil if node.nil?

      product = self.new

      product.product_identifiers = node.xpath("//Product/ProductIdentifiers/item").map do |node|
        TitlePage::ProductIdentifier.from_xml(node)
      end

      title_node = node.xpath("//Product/Title")
      product.title = TitlePage::Title.from_xml(title_node)

      product.contributors = node.xpath("//Product/Contributors/item").map do |node|
        TitlePage::Contributor.from_xml(node)
      end

      sd_node = node.xpath("//Product/SupplyDetail")
      product.supply_detail = TitlePage::SupplyDetail.from_xml(sd_node)

      product
    end
  end

end
